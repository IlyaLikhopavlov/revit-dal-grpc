@using global::App.CommunicationServices.Revit
@using global::App.CommunicationServices.Revit.EventArgs
@using global::App.DAL.Common.Services.RevitEntities
@using global::App.DML
@using global::App.Services
@using global::App.CommunicationServices.ScopedServicesFunctionality
@inject ApplicationObject ApplicationObject
@inject RevitDataService RevitDataService
@inject IDocumentDescriptorServiceScopeFactory scopeFactory
@inject NavigationManager UriHelper

@inherits LayoutComponentBase

@page "/RevitDataTable"

<h1>RevitDataTable</h1>

<p>Document file name: @ApplicationObject?.ActiveDocument?.Title</p>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Type</th>
            <th>Category</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in RevitDataService?.GetAllBaseEntities()!)
        {
            <tr>
                <td>
                    @item.Id
                </td>
                <td>
                    @item.Name
                </td>
                <td>
                    @(item.TypeName ?? @"unknown")
                </td>
                <td>
                    @((item as Bar)?.Category?.Name ?? @"no category")
                </td>
                <td>
                    <button class="btn btn-secondary" @onclick="@(async () => await RemoveAsync(item.Id))">Remove</button>
                </td>
            </tr>
        }
    </tbody>
</table>

Navigate to other component <a href="" @onclick="NavigatetoNextComponent">Click here</a>

@* @Body  *@

@* @foreach (var level in RevitLevels) *@
@* { *@
@*     <div>Level @(level.Elevation)</div> *@
@*     <select title="@level.Elevation"> *@
@*         @foreach (var room in level.Rooms) *@
@*         { *@
@*             <option>Room @room.Number</option> *@
@*         } *@
@*     </select> *@
@*     <br /> *@
@*     <br /> *@
@* } *@

<button class="btn btn-primary" @onclick="AllocateFoosAsync">Allocate Foos</button>
<button class="btn btn-primary" @onclick="AllocateBarsAsync">Allocate Bars</button>
<button class="btn btn-primary" @onclick="GetRevitLevelsAsync">Get Levels</button>
<button class="btn btn-primary" @onclick="@(async () => await AddNewBarAsync())">Add Bar</button>
<button class="btn btn-primary" @onclick="@(async () => await AddNewCatalogEntryAsync())">Add FooCatalog</button>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ApplicationObject.DocumentDescriptorChanged += DocumentDescriptorChanged;

        await InitRevitDataServiceAsync();

        RevitLevels = await GetRevitLevelsAsync();
    }

    List<BuildingLevel> RevitLevels { get; set; } = new();

    void NavigatetoNextComponent()
    {
        UriHelper.NavigateTo("RevitLevelsTable");
    }

    private async Task InitRevitDataServiceAsync()
    {
        if (ApplicationObject.ActiveDocument is null)
        {
            return;
        }

        var initTask = RevitDataService?.Initialization;

        if (initTask is not null)
        {
            await initTask;
        }
    }

    private async void DocumentDescriptorChanged(object sender, DocumentDescriptorChangedEventArgs e)
    {
        await InitRevitDataServiceAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task AllocateFoosAsync()
    {
        await RevitDataService?.AllocateFoosAsync()!;
    }

    private async Task AllocateBarsAsync()
    {
        await RevitDataService?.AllocateBarsAsync()!;
    }

    private async Task<List<BuildingLevel>> GetRevitLevelsAsync()
    {
        var levelRoomsService = scopeFactory.GetScopedService<LevelsRoomsService>();

        return await levelRoomsService?.GetRevitLevelsAsync()!;
    }

    public void Dispose()
    {
        ApplicationObject.DocumentDescriptorChanged -= DocumentDescriptorChanged;
    }

    private async Task AddNewBarAsync()
    {
        await RevitDataService.AddNewBarAsync();
    }

    private async Task RemoveAsync(int id)
    {
        await RevitDataService.RemoveEntityAsync(id);
    }

    private async Task AddNewCatalogEntryAsync()
    {
        await RevitDataService.AddCatalogEntry();
    }

}
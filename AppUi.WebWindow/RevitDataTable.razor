@using global::App.CommunicationServices.Revit
@using global::App.CommunicationServices.Revit.EventArgs
@using global::App.ScopedServicesFunctionality
@using global::App.Services
@using Microsoft.Extensions.DependencyInjection
@using Bimdance.Framework.DependencyInjection.FactoryFunctionality
@inject ApplicationObject ApplicationObject
@inject IDocumentDescriptorServiceScopeFactory DocumentDescriptorServiceScopeFactory

<h1>RevitDataTable</h1>

<p>Document file name: @ApplicationObject?.ActiveDocument?.Title</p>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in _revitDataService?.GetAllBaseEntities()!)
    {
        <tr>
            <td>
                @item.Id
            </td>
            <td>
                @item.Name
            </td>
            <td>
                @(item.TypeName ?? @"unknown")
            </td>
        </tr>
    }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="AllocateFoos">Allocate Foos</button>
<button class="btn btn-primary" @onclick="AllocateBars">Allocate Bars</button>

@code {
    private RevitDataService _revitDataService;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        ApplicationObject.DocumentDescriptorChanged += DocumentDescriptorChanged;

        await InitRevitDataServiceAsync();
    }

    private async Task InitRevitDataServiceAsync()
    {
        if (ApplicationObject.ActiveDocument is null)
        {
            return;
        }

        var scope = DocumentDescriptorServiceScopeFactory.CreateScope(ApplicationObject.ActiveDocument);
        _revitDataService = 
            scope.ServiceProvider.GetService<IFactory<DocumentDescriptor, RevitDataService>>()?
                .New(ApplicationObject.ActiveDocument);

        var initTask = _revitDataService?.Initialization;

        if (initTask is not null)
        {
            await initTask;
        }
    }

    private async void DocumentDescriptorChanged(object sender, DocumentDescriptorChangedEventArgs e)
    {
        await InitRevitDataServiceAsync();        
        await InvokeAsync(StateHasChanged);
    }

    private void AllocateFoos()
    {
        _revitDataService?.AllocateFoosAsync();
    }

    private void AllocateBars()
    {
        _revitDataService?.AllocateBarsAsync();
    }

    public void Dispose()
    {
        ApplicationObject.DocumentDescriptorChanged -= DocumentDescriptorChanged;
    }
}
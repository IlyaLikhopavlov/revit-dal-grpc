syntax = "proto3";

option csharp_namespace = "Revit.Services.Grpc.Services";

import "CommonMessages.proto";

service RevitDataExchange {
	rpc PushDataToRevitInstance (.PushDataToRevitInstanceRequest) returns (.BasicResponse);
	rpc PushDataToRevitInstances (.PushDataToRevitInstancesRequest) returns (.BasicResponse);
	rpc PullDataFromRevitInstance (.PullDataFromRevitInstanceRequest) returns (.PullDataFromRevitInstanceResponse);
	rpc PullDataFromRevitInstances (.PullDataFromRevitInstancesRequest) returns (.PullDataFromRevitInstancesResponse);
	rpc PullDataFromRevitInstancesByType (.PullDataFromRevitInstancesByTypeRequest) returns (.PullDataFromRevitInstancesResponse);
	rpc AllocateRevitInstancesByType (.AllocateRevitInstancesByTypeRequest) returns (.AllocateRevitInstancesByTypeResponse);
	rpc CreateRevitInstance (.CreateRevitInstanceRequest) returns (.CreateRevitInstanceResponse);
	rpc DeleteRevitInstance (.DeleteRevitInsatnceRequest) returns (.BasicResponse);
	rpc CreateOrUpdateCatalogRecord (.CreateOrUpdateRecordInCatalogRequest) returns (.BasicResponse);
	rpc ReadRecordFromCatalog (.ReadRecordFromCatalogRequest) returns (.ReadRecordFromCatalogResponse);
	rpc ReadAllRecordsFromCatalog (.ReadAllRecordsFromCatalogRequest) returns (.ReadAllRecordsFromCatalogResponse); //todo stream on the server side
	rpc GetLevelsFromRevit(.GetLevelsFromRevitRequest) returns(.GetLevelsFromRevitResponse);
}

enum DomainModelTypesEnum {
	Foo = 0;
	Bar = 1;
	BcLevel = 3;
}

message InstanceData {
	int32 InstanceId = 1;
	string Data = 2;
}

message CatalogRecordData {
	string GuidId = 1;
	string Data = 2;
}

//Push one instance by ID
message PushDataToRevitInstanceRequest {
	string DocumentId = 1;
	InstanceData InstanceData = 2;
	DomainModelTypesEnum Type = 3;
}

//Push a range of instances by IDs
message PushDataToRevitInstancesRequest {
	string DocumentId = 1;
	repeated InstanceData InstanceData = 2;
	DomainModelTypesEnum Type = 3;
}

//Pull one instance by ID
message PullDataFromRevitInstanceRequest {
	string DocumentId = 1;
	int32 InstanceId = 2;
	DomainModelTypesEnum Type = 3;
}

message PullDataFromRevitInstanceResponse {
	ErrorInfo ErrorInfo = 1;
	string Data = 2;
}

//Pull a range of instances by ID
message PullDataFromRevitInstancesRequest {
	string DocumentId = 1;
	repeated int32 InstanceId = 2;
	DomainModelTypesEnum Type = 3;
}

message PullDataFromRevitInstancesResponse {
	ErrorInfo ErrorInfo = 1;
	repeated InstanceData InstancesData = 2;
}

//Pull a range of instances by Type
message PullDataFromRevitInstancesByTypeRequest {
	string DocumentId = 1;
	DomainModelTypesEnum Type = 2;
}

//Allocate a range of instances by specific Type
message AllocateRevitInstancesByTypeRequest {
	string DocumentId = 1;
	DomainModelTypesEnum AllocationType = 2;
}

message AllocateRevitInstancesByTypeResponse {
	ErrorInfo ErrorInfo = 1;
	repeated int32 AllocatedItemsId = 2;
}

//Create revit instance by Type
message CreateRevitInstanceRequest {
	string DocumentId = 1;
	DomainModelTypesEnum Type = 2;
}

message CreateRevitInstanceResponse {
	ErrorInfo ErrorInfo = 1;
	int32 InstanceId = 2;
}

//Delete revit instance
message DeleteRevitInsatnceRequest {
	string DocumentId = 1;
	int32 InstanceId = 2;
}

//Update catalog record
message CreateOrUpdateRecordInCatalogRequest {
	string DocumentId = 1;
	CatalogRecordData CatalogRecordData = 2;
}

//Read catalog record
message ReadRecordFromCatalogRequest {
	string DocumentId = 1;
	string GuidId = 2;
}

message ReadRecordFromCatalogResponse {
	ErrorInfo ErrorInfo = 1;
	CatalogRecordData CatalogRecordData = 2;
}

//Read all catalog records
message ReadAllRecordsFromCatalogRequest {
	string DocumentId = 1;
}

message ReadAllRecordsFromCatalogResponse {
	ErrorInfo ErrorInfo = 1;
	repeated CatalogRecordData Records = 2;
}

message GetLevelsFromRevitRequest{
	string DocumentId = 1;
}

message GetLevelsFromRevitResponse{
	ErrorInfo ErrorInfo = 1;
	repeated Level Levels = 2;
}

message Level{
	string Value = 1; 
	repeated Room Rooms = 2;
} 

message Room {
	string Number = 1;
}